var tipuesearch = {"pages": [{'title': 'About', 'text': '第一大組 \n 組長： \n 40923108 \n 組員： \n 40923101 \n 40923103 \n 40923119 \n 40923137 \n 40923154 \n 40923156 \n 40971134 \n 每週會議連結： https://meet.google.com/dnw-uugj-pbw \n', 'tags': '', 'url': 'About.html'}, {'title': '分組名單', 'text': '分組名單 \n cd2022-ag1 40923101 web \xa0|\xa0 a40923101 repo \xa0| 40923103 web \xa0|\xa0 40923103 repo \xa0| 40923108 web \xa0|\xa0 40923108 repo \xa0| 40923119 web \xa0|\xa0 40923119 repo \xa0| 40971134 web \xa0|\xa0 40971134 repo \xa0| 40923137 web \xa0|\xa0 40923137 repo \xa0| 40923154 web \xa0|\xa0 40923154 repo \xa0| 40923156 web \xa0|\xa0 ZHILIN-0817 repo \xa0| \n cd2022-ag2 40923102 web \xa0 | \xa0 40923102 repo \xa0 | 40923104 web \xa0 | \xa0 40923104 repo \xa0 | 40923105 web \xa0 | \xa0 40923105 repo \xa0 | 40923106 web \xa0 | \xa0 40923106 repo \xa0 | 40923107 web \xa0 | \xa0 40923107 repo \xa0 | 40923109 web \xa0 | \xa0 CYC40923109 repo \xa0 | 40923110 web \xa0 | \xa0 40923110 repo \xa0 | \n cd2022-ag3 40923114 web \xa0 | \xa0 40923114 repo \xa0 | 40923115 web \xa0 | \xa0 jason60714 repo \xa0 | 40923122 web \xa0 | \xa0 40923122 repo \xa0 | 40923129 web \xa0 | \xa0 40923129 repo \xa0 | 40923146 web \xa0 | \xa0 a40923146 repo \xa0 | 40923148 web \xa0 | \xa0 40923148 repo \xa0 | 40923157 web \xa0 | \xa0 40923157 repo \xa0 | \n cd2022-ag4 40923111 web \xa0 | \xa0 40923111 repo \xa0 | 40923116 web \xa0 | \xa0 40923116 repo \xa0 | 40923124 web \xa0 | \xa0 40923124 repo \xa0 | 40923125 web \xa0 | \xa0 40923125 repo \xa0 | 40923126 web \xa0 | \xa0 40923126-1 repo \xa0 | 40923127 web \xa0 | \xa0 40923127-1 repo \xa0 | 40923128 web \xa0 | \xa0 40923128 repo \xa0 | \n cd2022-ag5 40923120 web \xa0 | \xa0 40923120 repo \xa0 | 40923123 web \xa0 | \xa0 40923123 repo \xa0 | 40923133 web \xa0 | \xa0 40923133 repo \xa0 | 40923134 web \xa0 | \xa0 40923134 repo \xa0 | 40923135 web \xa0 | \xa0 40923135 repo \xa0 | 40923139 web \xa0 | \xa0 40923139 repo \xa0 | 40923142 web \xa0 | \xa0 40923142 repo \xa0 | 40923151 web \xa0 | \xa0 40923151 repo \xa0 | \n cd2022-ag6 40923113 web \xa0 | \xa0 40923113 repo \xa0 | 40923131 web \xa0 | \xa0 40923131 repo \xa0 | 40923140 web \xa0 | \xa0 40923140 repo \xa0 | 40923144 web \xa0 | \xa0 40923144 repo \xa0 | 40923149 web \xa0 | \xa0 40923149r repo \xa0 | 40923150 web \xa0 | \xa0 40923150 repo \xa0 | 40923152 web \xa0 | \xa0 40923152 repo \xa0 | \n cd2022-ag7 40823132 web \xa0 | \xa0 40823132 repo \xa0 | 40823143 web \xa0 | \xa0 40823143 repo \xa0 | 40923117 web \xa0 | \xa0 Maxlee999 repo \xa0 | 40923118 web \xa0 | \xa0 40923118 repo \xa0 | 40923136 web \xa0 | \xa0 40923136-1 repo \xa0 | 40923143 web \xa0 | \xa0 40923143 repo \xa0 | 40923145 web \xa0 | \xa0 40923145 repo \xa0 | 40923147 web \xa0 | \xa0 40923147 repo \xa0 | \n', 'tags': '', 'url': '分組名單.html'}, {'title': 'W3', 'text': '會議記錄表： \n \n \n', 'tags': '', 'url': 'W3.html'}, {'title': '40923101', 'text': '指定任務:有 38 個比較接近 NX1980 版本功能的教學影片，以 Wink 影片互相對照的方式採 NX1980 執行操作進行整理，完成後將所負責的 Wink 教學影片嵌入個人與大分組的 w3 中。 test \n NX Rendering\xa0 \n NX的渲染功能，可以選擇自己想設計的 顏色 、 線條 、 材質 及 背景 等等。 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n NX CAM Introduction \n NX CAM 簡介，講解如何 設置程序 進行工件 模擬加工 。 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n NX Sheet Metal Introduction \n NX鈑金介紹，利用 板金工具 在繪圖時會更加便利。 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n Adding a texture with Siemens NX \n 使用 Siemens NX 工具 添加自己喜歡的 紋理 或 圖形 。 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n CES: NX Animation Designer \n NX動畫設計器可以設計出機械產品的 運動 路線 。 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 使用blog來記錄自己每週製作的作業 \n \n 編輯好後對 local-blog 按下 右鍵 ，在按下 Goto Script \n \n 將那段網址複製下來 \n \n 在小黑窗打上 \n cd tmp \n cd cd2022\xa0 \n pelican markdown -o blog -s local_publishconf.py \n \n 都好了後可以推看看倉儲，檢查有沒有完成 \n \n 每個組員分配不同的繪圖軟體分別是 Solvespace、NX12、NX1980、NX2008 與 Onshape \n 我是利用 NX12來 繪製出Pick and Place demo範例所需的零組件 \n 將零件組裝好後 \n 利用Coppeliasim模擬機械運轉 \n 目前零件畫好也也組裝完畢 \n 研究程式碼讓機械手臂可以正常運轉 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '40923101.html'}, {'title': '40923103', 'text': '27 Design Fundamentals\xa0 \n 對於工程設計約束和問題了解的越多，解決約束，越容易完成大量的設計。 \n 像是醫療儀器開發設計過程也使用了NX這類的工具來做設計。 \n 利用工具能讓物件生產時較為順利，避免掉較不合理的尺寸或配合上的問題。 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n 28 NX Design Simulation FEM Example \n 利用NX畫出長柱體並且研究結構和材料 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n 29 Intro Lecture \n 常見的幾何形狀探討設計公差，使用到的測量儀器 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '40923103.html'}, {'title': '40923108', 'text': '本週任務： \n 38 個接近 NX1980 版本功能的教學影片，需以 Wink 影片互相對照的方式採 NX1980 執行操作進行整理，完成後將所負責的 Wink 教學影片嵌入個人與大分組的 w3 中。 \n 22.Rocker Arm working Drawing \n 概要： 這部影片是講解將立體圖轉成工作圖、標註和剖面的方式，以及如何隱藏線型。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 23.Nx Linked Body Brake Rotor \n 概要： 講述對原有的零件迴轉修剪、孔的定位等修改變成一個 連體煞車盤。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 24.Nx Part Family Example \n 概要： 透過所提供的參數模型，對樂高積木陣列組件，創建一個系列的樂高積木。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 25.Nx Assembly Modeling-Pattern Component \n 概要： 講解如何使用 測量 、 向量的陣列 和 零件約束 以及更 改零件顏色 以便辨認等功能。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 26.Nx Exploded Views \n 概要： 講述著將一個組合件爆炸後進而轉成爆炸圖並說明如何創立零件表和件號。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '40923108.html'}, {'title': '40923119', 'text': '13 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 14 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 15 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 16 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '40923119.html'}, {'title': '40923137', 'text': '30 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 31 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 32 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 33 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '40923137.html'}, {'title': '40923154', 'text': '', 'tags': '', 'url': '40923154.html'}, {'title': '40923156', 'text': '總共有38個 NX1980 相近的 YOUTUBE 教學影片，使用WINK影片重點解說NX1980功能內容。 \n 我要解說的影片總共有6部，編號為7~12 。 \n \n 7. expression (continued) \n 設定數據跟限制\xa0 \xa0截面模數 設定公式 跟查看數值 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n 8. connector nut \n 畫螺母 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 9. box \n 設定直徑 跟高度 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 10. master model drawing \n 叫工程圖 放置三視圖 標尺寸 標註解 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 11. trial head \n 介紹鑽孔功能 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 12. datums and layers \n 介紹 基準面 圖層 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '40923156.html'}, {'title': '40971134', 'text': 'wink17 \n \n \n \n \n   \n \n \n \n \n wink18 \n \n \n \n \n   \n \n \n \n \n wink19 \n \n \n \n \n   \n \n \n \n \n wink20 \n \n \n \n \n   \n \n \n \n \n wink21 \n \n \n \n \n   \n \n \n \n \n', 'tags': '', 'url': '40971134.html'}, {'title': 'W6', 'text': '使用Leo編輯網頁Blog \n 教學過程： \n 啟動 leo \n \n 點選 File/Open-Outline \n \n 開啟 pelican\xa0 \n 註：此檔存在tmp/cd2022/config下 \n \n 將下列部分的原有的資料，改成 自己的學號 和 標題 和 課程網頁連結 \n \n \n 全部修改好後先 File/Save \n 接著對 local-blog 按下 右鍵 ，在按下 Goto Script \n 會顯示 Pelican markdown -o blog -s _publishconf.py \n 複製後正常推送 \n \n \n \n Leo上放wink影片： \n 在新增wink原始碼前 \n 增加 <link rel="stylesheet" type="text/css" href="./../cmsimde/static/winkPlayer.css"></p> <script type="text/javascript" src="./../cmsimde/static/winkPlayer.js"></script> \n 將底線處的字刪掉，並將source src改成連結。 \n \n test \n \n \n', 'tags': '', 'url': 'W6.html'}, {'title': '網誌連結', 'text': '大組課程網誌： \n cd2022ag1 \n 組員課程網誌： \n 40923101 \n 40923103 \n 40923108 \n 40923119 \n 40923137 \n 40923154 \n 40923156 \n 40971134 \n', 'tags': '', 'url': '網誌連結.html'}, {'title': 'W8', 'text': '本週任務： \n 依照下列零件檔案, 將組員分為三組, 分別以 Solvespace, NX (12, 1980 或 2008) 及 Onshape, 完成各零件 工程圖 與 組合圖 後, 將 uarm 組合件轉為 \xa0 STL 格式後轉入 CoppeliaSim , 並安排以 GUI Slider 方式 控制前三軸作動。 \xa0各組員需將零組件繪製過程與 CoppeliaSim 操控流程及心得。 \n \n 零件繪製分配： \n 在這共64個零件中，組員間很有默契達成共識，由40923101及40923108合力繪製46個零件檔，其餘18個檔案平均分配交由小組組員完成。 \n 軟體分配： \n 40923101：NX12\xa0 零件檔 \n 40923103：NX1980  零件檔 \n 40923108：NX12\xa0 零件檔 \n 40923119：onshape  零件檔 \n 40923137：NX2008 \n 40923154：NX1980  零件檔 \n 40923156：onshape  零件檔 \n 40971324：solvespace  零件檔 \n', 'tags': '', 'url': 'W8.html'}, {'title': '組員心得', 'text': '40923101： \n 在繪圖過程中我們兩個人一組，一個負責查詢零件尺寸另一個繪圖，我們分工合作畫了40幾個零件。在畫螺絲時有很多類似的形狀，當時就在想有沒有更快的方法可以繪製相似零件的方法，這方面可以尋找一些資訊看有沒有迅速便利的方式。接著組合圖沒有太大的問題，按照老師給的組合圖細心的組合是沒問題的，比較麻煩的是CoppeliaSim控制前三軸作動，需要仔細將連桿連接，這方面花費較多的時間去研究，最終還是有完成三軸作動。 \n \n 40923103： \n 在繪製零件的過程中其實有些許遇到困難，因為有些小細節以及量測問題都讓我頭很大，所幸後來還是有繪製出來。模擬的部分因為總共有153個零件，一開始想試著組裝，到後來眼睛真的快脫窗，所以走了一條捷徑，下載了老師的檔案去模擬，哎呀我真是不應該。 \n \n 40923108： \n 繪製眾多零件的 過程相當繁瑣、性質相近的零件比例 相當高，但透過兩人相互合作共同完成了40多個零件，其餘交給其他組員完成，最後整合所有零件，接著是組合、模擬的部分，組合時花費許多時間調整有很多細節要注意，一個出錯可能都會導致後續動作無法進行；而模擬則因為比較不熟悉CoppeliaSim的模式，因此需要花更多心力摸索和討論。 \n \n 40923156： \n 心得 這次的課程是協同需要小組跟大組合作，雖然跟上學期的課程有點類似，但還是學到很多不一樣的東西。 例如團隊分工以及工作的團隊在這個一起工作的溝通還有團隊的制度，我覺得這些很重要，因為這會影響我工作心情。在組長的領導下，跟其他組員的溝通沒有障礙然後大家都有照進度表的時間走，讓我們的分工順利完成我覺得很好。組合的部分在組裝過程遇到問題，遇到干涉問題 因為是協同不同人畫的零件放在一起組裝會有許多繁雜的問題，所以目前還在排解問題。之後模擬完成會在匯入一次。 \n \n 40971134： \n 在繪圖的方面因為沒學過以上三種繪圖軟體，所以我就從頭開始學習使用NX繪製零件，而組合圖的部分只要按照老師給的組合圖的組合就沒有太大的問題，在CoppeliaSim裡控制前三軸作動需要正確的讓連桿連接，這方面花費較多的時間去研究。 \n \n \n \n \n', 'tags': '', 'url': '組員心得.html'}, {'title': 'W11', 'text': 'w11-1任務： \n 以每兩人一小組的方式，加入個人 w8-w10 協同設計過程所負責的項目內容與心得。 \n \n \n', 'tags': '', 'url': 'W11.html'}, {'title': 'w11s1', 'text': '', 'tags': '', 'url': 'w11s1.html'}, {'title': '40923101-2', 'text': '這週的作業跟期中考一起製作uarm機械 \n 組員分別以Solvespace和NX及Onshape完成零件繪製後 \n 這是我們繪製的uarm各零件圖 \n 總共有64個零件，我繪製了46個零件，剩下的由小組組員完成 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 將畫好的零件按照老師給的組合立體圖組合出來 \n 再來存成 STL檔就可以轉入CoppeliaSim \n \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 將uarm組合件存為STL檔後轉入CoppeliaSim \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 以GUI Slider方式控制前三軸作動 \n \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 在繪圖過程中我們兩個人一組 \n 一個負責查詢零件尺寸另一個繪圖 \n 我們分工合作畫了40幾個零件 \n 在畫螺絲時有很多類似的形狀 \n 當時就在想有沒有更快的方法可以繪製相似零件的方法 \n 這方面可以尋找一些資訊看有沒有迅速便利的方法 \n 接著組合圖沒有太大的問題 \n 按照老師給的組合圖細心的組合是沒問題的 \n 比較麻煩的是CoppeliaSim控制前三軸作動 \n 需要仔細將連桿連接 \n 這方面花費較多的時間去研究 \n 最終還是有完成三軸作動 \n', 'tags': '', 'url': '40923101-2.html'}, {'title': '40923108-2', 'text': 'w8-w10 協同設計過程所負責的項目內容與心得。 \n W8： \n w8的任務： 以 Solvespace, NX (12, 1980 或 2008) 及 Onshape, 完成各零件 工程圖 與 組合圖 後, 將 uarm 組合件轉為 \xa0 STL 格式後轉入 CoppeliaSim , 並安排以 GUI Slider 方式 控制前三軸作動。 \n 與同學共同繪製40多個零件，其餘10幾個零件交由其他組員完成，繪圖過程相當繁瑣，需要有很多耐心慢慢做，接著是組合、模擬的部分，這因為比較不熟悉因此需要花更多心力摸索和討論。 \n \n \n \n \n \n   \n \n \n \n \n \n', 'tags': '', 'url': '40923108-2.html'}, {'title': 'w11s2', 'text': '', 'tags': '', 'url': 'w11s2.html'}, {'title': '40923103-2', 'text': 'W8 \n 利用Onshape繪製組合圖側面的箱子，因為這個不能直接拆解會比較複雜，所以分配到這兩個小零件 \n \n 小組分配繪製零件，我的部分分配到減速箱上蓋和軸承支撐軸 \n \n \n 繪製完後以及匯入其他零件就可以開始組裝，但因過程太過繁雜，索性參考老師已組好的檔案 \n \n 之後再匯入到 CoppeliaSim \n \n W9 \n 上課期間繼續組上禮拜的零件並且放在coppelicim裡模擬 \n 但因為我才剛組好全部的零件，沒有實際去模擬過 \n 時間差不多後就開始自評期中成績 \n W10 \n w10_block_ui \n \n \n \n \n \n \n   \n \n \n \n \n \n \xa0 \n w10_nx_integ \n \n \n \n \n   \n \n \n \n \n \n \n \n \n w10_ssh \n \xa0 \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '40923103-2.html'}, {'title': '40923156-2', 'text': '分別以 Solvespace, NX (12, 1980 或 2008) 及 Onshape, 完成各零件工程圖與組合圖後, 將 uarm 組合件轉為 STL 格式後轉入 CoppeliaSim 我分配到的零件是減速箱下蓋以及軸承支撐圖 因為是用onshape繪製這次的uarm所以有些零件可以直接匯入 但碰到組合件還是需要拆開重畫沒有辦法使用匯入的 1)   2) \n \n 3) \n \n \n w10_ block_ui \n 上課內容影片註解 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n nx integ \n \n \n \n \n   \n \n \n \n \n \n \n \n \n ssh \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '40923156-2.html'}, {'title': 'w11s3', 'text': '', 'tags': '', 'url': 'w11s3.html'}, {'title': '40971134-2', 'text': 'W8-W10  協同設計過程所負責的項目內容與心得。 \n W8 \n 組員分別以Solvespace、NX及Onshape繪製uarm機械手臂的零件 \n 接下來將uarm組合件存為stl檔後轉入coppeliasim \n \n 以GUI Slider方式控制前三軸作動 \n \n \n \n \n \n \n   \n \n \n \n \n 在繪圖的方面因為沒學過以上三種繪圖軟體，所以我就從頭開始學習使用NX繪製零件 \n 而組合圖的部分只要按照老師給的組合圖的組合就沒有太大的問題 \n 在CoppeliaSim裡控制前三軸作動需要正確的讓連桿連接 \n 這方面花費較多的時間去研究 \n \n W10 \n w10_block_ui \n \n \n \n \n \n   \n \n \n \n \n w10_nx_integ \n \n \n \n \n \n   \n \n \n \n \n w10_ssh \n \n \n \n \n \n   \n \n \n \n \n \n \n', 'tags': '', 'url': '40971134-2.html'}, {'title': 'W12', 'text': '', 'tags': '', 'url': 'W12.html'}, {'title': 'w12 40923101', 'text': 'uarm 機械手臂所需的零件總共有155個 \n 若不加入重複使用的零件總數有58個 \n uarm零件檔 \n uarm組合檔 \n uarm CoppeliaSim模擬檔 \n \n \n M2X4 螺絲 \n M3X4 内六角 圓頭 螺絲 \n M3X5 内六角 圓頭 螺絲 \n M3X5 平頭 螺絲 \n M3X5 沉頭 螺絲 \n M3X5 扁平 頭鐵鍍鎳 螺絲 \n M3X5  圓頭 黑色十字 螺絲 \n M3X6 内六角圓頭 螺絲 \n M3X15 雙通 螺絲 \n M4X5 顶 螺絲 \n M4X6 沉 頭 螺絲 \n M4X7 平 頭 螺絲 \n M4X10 平 頭 螺絲 \n M4X15 平頭 螺絲 \n MF84 \n 2mm導光柱 \n 2mm導熱硅胶片 \n 3Dprint轉接板 \n 5-13-4軸承 \n 6X2.5 磁鐵 \n 8.3X1.5 防滑墊 \n 前端通用件 \n 前端關節 \n 7mm 支撐柱 \n 3mm 鋁支撐柱 \n 三角形連桿軸承壓緊件 \n 三角形連桿 \n 絞鍊 \n 主臂關節2 \n 主臂關節1 \n 電機軸承支撐座_左側 \n 電機軸承支撐座_右側 \n 右側曲柄 \n 輸出軸 \n 右側連桿 \n 左側連桿 \n 4mm 鋁支撐柱 \n 減速箱上殼 \n 減速箱下殼 \n L型連接件 \n 軸承支撐軸 \n 軸承支撐圈 \n 底座上蓋 \n 底座中間部分 \n 底座蓋 \n 磁编碼器PCB \n 42進步電機 \n 塑料蓋板 \n 利用老師今天所教的可以使用py檔案來run \n 就可以得知uarm機械手臂 \n 30%零件採steel製，其餘採 A l uminum製，總重量 約 2,2205kg \n 全部零件採Aluminum 製，總重量 約1,412kg \n 全部零件採steel製， 總重量 約4,1062kg \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w12 40923101.html'}, {'title': 'w12 40923103', 'text': '本週透過上課時所給的程式碼，套用到NX程式裡，就可以跑出來顯示組合件裡的零件組和總重量。 所需的零件總共有155個。 \n \n \n \n \n', 'tags': '', 'url': 'w12 40923103.html'}, {'title': 'w12 40923108', 'text': '本週任務： \n \n \n cd2022_uarm_nx12_imported.7z 中, 若計入重複引用的零件, 總數有多少? 請列出組成此一 uarm 機械手臂所需的 BOM 列表。 \n Ans： 所需的零件總共有155個。 BOM列表 \n \n \n 若不計入重複引用的零件, 總數有多少?請列出各零件名稱. \n Ans：58個。分別為：M2X4 螺絲、M3X4 内六角圓頭螺絲、M3X5 内六角圓頭螺絲、M3X5 平頭螺絲、M3X5 沉頭螺絲、M3X5 扁平頭鐵鍍鎳螺絲、M3X5 圓頭黑色十字螺絲、M3X6 内六角圓頭螺絲、M3X15 雙通螺絲、M4X5 頂螺絲、M4X6 沉頭螺絲、M4X7 平頭螺絲、M4X10 平頭螺絲、M4X15 平頭螺絲、MF84、2mm導光柱、2mm導熱硅胶片、3Dprint轉接板、5-13-4軸承、6X2.5 磁鐵、8.3X1.5 防滑墊、前端通用件、前端關節、7mm 支撐柱、3mm 鋁支撐柱、三角形連桿軸承壓緊件、三角形連桿、絞鍊、主臂關節2、主臂關節1、電機軸承支撐座_左側、電機軸承支撐座_右側、右側曲柄、輸出軸、右側連桿、左側連桿、4mm 鋁支撐柱、減速箱上殼、減速箱下殼、L型連接件、軸承支撐軸、軸承支撐圈、底座上蓋、底座中間部分、底座蓋、磁编碼器PCB、42進步電機、塑料蓋板。 \n \n \n 當執行機械手臂的設計過程中, 若已知各零件所擬採用的零件材料密度, 請問此一設計中的 uarm 機械手臂的淨重量為多少? \n Ans： 30% 零件採 Steel 製, 其餘採 Aluminum 製, 總重量約 2.2205kg。 \xa0 \xa0 \xa0 \xa0 \xa0全部零件採 Aluminum 製, 總重量約 1.4123kg。 \xa0 \xa0 \xa0 \xa0 \xa0全部零件採 Steel 製, 總重量約 4.1062kg。 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w12 40923108.html'}, {'title': 'w12 40971134', 'text': '本週透過上課時所給的程式碼，套用到NX程式裡，就可以跑出來顯示組合件裡的零件組和總重量。 所需的零件總共有155個。 \n cadlab startup \n \n \n \n \n \n   \n \n \n \n \n graduate_school \n \n \n \n \n \n   \n \n \n \n \n Task \n \n \n \n \n \n   \n \n \n \n \n', 'tags': '', 'url': 'w12 40971134.html'}, {'title': 'W14', 'text': '', 'tags': '', 'url': 'W14.html'}, {'title': 'w14 40923101', 'text': '利用 Coppeliasim 模擬MTB運轉 \n 將方塊吸起來 \n 轉半圈在放下來 \n MTB零件檔 \n MTB組合檔 \n MTB CoppeliaSim模擬檔 \n \n \n 利用老師給的程式碼去修改一些部份 \n 使機械能購運轉 \n 在運轉前要記得零件動態關閉 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n \n \n function sysCall_init() \n    axis1=sim.getObject(\'/joint1\')\n    axis2=sim.getObject(\'/joint2\')\n    axis3=sim.getObject(\'/joint3\')\n    suctionPad=sim.getObject(\'/suctionPad\')\n    MTB_Robot=sim.getObject("/base")\n    BaseFrame=sim.getObject("/BaseFrame")\n    block =sim.getObject("/block")\n    rotation1 = 0\n    distance3 = 0\n    deg = math.pi/180.\nend\n\n\nfunction sysCall_actuation() \n--[[\n    rotation1 = rotation1 + 0.5*deg\n    print(rotation1)\n    sim.setJointPosition(axis1, -rotation1)\n    sim.setJointPosition(axis2, -rotation1)\n]]\n\n    message, auxiliaryData=sim.getSimulatorMessage()\n        while message ~= -1 do\n            key=auxiliaryData[1]\n            sim.addStatusbarMessage(\'user press key:\'..key)\n            if (message==sim.message_keypress) then\n               --if (auxiliaryData[1]==112) then --p activate the suction pad\n                if (auxiliaryData[1]==string.byte(\'p\')) then\n                    -- if key p pressed activate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                end -- if p\n                if (auxiliaryData[1]==113) then --q deactivate the suction pad\n                    -- if key q pressed deactivate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                end -- if q\n                if (auxiliaryData[1]==114) then --r right turn in degree\n                    -- if key r pressed axis1 angle adds 5 degrees\n                     rotation1 = rotation1 + 5*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if r\n                if (auxiliaryData[1]==108) then --l left turn in degree\n                    -- if key l pressed axis1 angle substract 5 degrees\n                     rotation1 = rotation1 - 5*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if l\n                if (auxiliaryData[1]==100) then --d suction pad down\n                    -- if key d pressed axis3 will down 0.01 m\n                     distance3 = distance3 + 0.01\n                     sim.setJointPosition(axis3, distance3)\n                end -- if d\n                if (auxiliaryData[1]==117) then --u suction pad up\n                    -- if key u pressed axis3 will up 0.01 m\n                     distance3 = distance3 - 0.01\n                     sim.setJointPosition(axis3, distance3)\n                end -- if u\n                if (auxiliaryData[1]==99) then --c coordinate of block\n                    blockPosition = sim.getObjectPosition(block, BaseFrame)\n                    sim.addStatusbarMessage("coordinate:"..table_to_string(blockPosition))\n                end --if c\n           end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n        end -- while\nend -- function\nfunction sysCall_sensing() \n--[[\n    -- Read Proximity sensor (0= nothing detected, 1 = object detected)\n    local res = sim.readProximitySensor(proximity)\n\n    -- Check if possible to insert an new box\n    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then\n        insertBox()\n    end\n\n    -- If proximity sensor detects an object, stop the belt, stop inserting objects\n    if res == 1 and not hasStopped then\n        if boolList[1] then\n            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)\n            deltaTime = sim.getSimulationTime()-T_last_inserted\n            hasStopped = true\n        else\n            local box = table.remove(boxList,1)\n            local boxDummy = table.remove(boxDummyList,1)\n            table.remove(boolList,1)\n\n            sim.removeObject(box)\n            sim.removeObject(boxDummy)\n        end\n    end\n\n    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting\n    if res == 0 and hasStopped then\n        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)\n        hasStopped = false\n        T_last_inserted = sim.getSimulationTime()-deltaTime\n    end\n    \n]]--\nend\nfunction sysCall_cleanup() \nend \n-- Convert a lua table into a lua syntactically correct string\nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n\n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\n\n\nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n\n\n \n', 'tags': '', 'url': 'w14 40923101.html'}, {'title': 'w14 40923103', 'text': '以鍵盤控制 MTB_nx robot (for CoppeliaSim 4.3.0) \n R(向右轉) L(向左轉) U(向上移) D(向下移) \n \n \n \n \n \n   \n \n \n \n \n \n \n', 'tags': '', 'url': 'w14 40923103.html'}, {'title': 'w14 40923108', 'text': 'MTB 檔案 \n 以程式自己作動： \n \n 以鍵盤控制 MTB_nx 機器人（適用於 CoppeliaSim 4.3.0）： \n \n L：順時針轉\xa0 \xa0R：逆時針轉 \n U：吸盤上升\xa0 D：吸盤下降 \n P：激活吸盤\xa0 Q：停止吸盤 \n \n', 'tags': '', 'url': 'w14 40923108.html'}, {'title': 'w14 40971134', 'text': '以鍵盤控制 MTB_nx robot (for CoppeliaSim 4.3.0) \n U(向上移) D(向下移) R(向右轉) L(向左轉) \n \n \n \n \n \n   \n \n \n \n \n', 'tags': '', 'url': 'w14 40971134.html'}, {'title': 'W15', 'text': '', 'tags': '', 'url': 'W15.html'}, {'title': 'w15 40923101', 'text': '使用老師的程式，利用鍵盤來操作旋轉模擬 \n 就可以順時針及逆時針旋轉 \n 利用 UARM 來Tic-Tae-Toe遊戲模擬 \n joint1， L為順時針，K 為逆時針 \n joint2， J 為順時針， H 為逆時針 \n joint3， G 為順時針， F 為逆時針 \n \n \n \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n function sysCall_init()\n    axis1=sim.getObject(\'./joint1\')\n    axis2=sim.getObject(\'./joint2\')\n    axis3=sim.getObject(\'./joint3\')\n    suctionPad=sim.getObject(\'/suctionPad\')\n    rotation1 = 0\n    rotation2 = 0\n    rotation3 = 0\n    deg = math.pi/180.\n    enableSuctionPad(true)\nend\nfunction enableSuctionPad(enable)\n    -- use the suctionPad object to pass the variable activity value\n    -- if enable = true, the activity = \'on\'\n    if enable then\n        sim.writeCustomDataBlock(suctionPad,\'activity\',\'on\')\n    else\n        sim.writeCustomDataBlock(suctionPad,\'activity\',\'off\')\n    end\nend\nfunction sysCall_actuation() \n--[[\n    rotation1 = rotation1 + 1*deg\n    print(rotation1)\n    sim.setJointPosition(axis1, -rotation1)\n    sim.setJointPosition(axis2, -rotation1)\n]]\n    message, auxiliaryData=sim.getSimulatorMessage()\n    while message ~= -1 do\n        key=auxiliaryData[1]\n        sim.addStatusbarMessage(\'user press key:\'..key)\n        if (message==sim.message_keypress) then\n           --if (auxiliaryData[1]==112) then --p activate the suction pad\n            if (auxiliaryData[1]==string.byte(\'p\')) then\n                -- if key p pressed activate the suction mode\n--sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                enableSuctionPad(true)\n            end -- if p\n            if (auxiliaryData[1]==string.byte(\'q\')) then --q deactivate the suction pad\n                -- if key q pressed deactivate the suction mode\n--sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                enableSuctionPad(false)\n            end -- if q\n            if (auxiliaryData[1]==string.byte(\'k\')) then --k right turn in degree\n                -- if key k pressed axis1 angle adds 2 degrees\n                 rotation1 = rotation1 + 2*deg\n                 --sim.setJointPosition(axis1, rotation1)\n                 sim.setJointTargetPosition(axis1, rotation1)\n            end -- if k\n            if (auxiliaryData[1]==string.byte(\'l\')) then --l left turn in degree\n                -- if key l pressed axis1 angle substract 2 degrees\n                 rotation1 = rotation1 - 2*deg\n                 --sim.setJointPosition(axis1, rotation1)\n                 sim.setJointTargetPosition(axis1, rotation1)\n            end -- if l\n-- for joint2 start ##########################################################\n            if (auxiliaryData[1]== string.byte("h")) then --r right turn in degree\n                -- if key r pressed axis1 angle adds 2 degrees\n                 rotation2 = rotation2 + 1*deg\n                 --sim.setJointPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis2, rotation2)\n            end -- if k\n            if (auxiliaryData[1]==string.byte("j")) then\n                -- if key j pressed axis2 angle substract 2 degrees\n                 rotation2 = rotation2 - 1*deg\n                 --sim.setJointPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis2, rotation2)\n            end -- if j\n-- for joint2 end ##########################################################\n-- for joint3 start ##########################################################\n            if (auxiliaryData[1]== string.byte("f")) then\n                -- if key f pressed axis3 angle adds 2 degrees\n                 rotation3 = rotation3 + 1*deg\n                 --sim.setJointPosition(axis3, rotation3)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if f\n            if (auxiliaryData[1]==string.byte("g")) then\n                -- if key g pressed axis3 angle substract 2 degrees\n                 rotation3 = rotation3 - 1*deg\n                 --sim.setJointPosition(axis3, rotation3)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if g\n-- for joint3 end ##########################################################\n            if (auxiliaryData[1]==99) then --c coordinate of block\n                blockPosition = sim.getObjectPosition(block, BaseFrame)\n                sim.addStatusbarMessage("coordinate:"..table_to_string(blockPosition))\n            end --if c\n       end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n    end -- while\nend -- function\n\nfunction sysCall_sensing() \n--[[\n    -- Read Proximity sensor (0= nothing detected, 1 = object detected)\n    local res = sim.readProximitySensor(proximity)\n\n    -- Check if possible to insert an new box\n    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then\n        insertBox()\n    end\n\n    -- If proximity sensor detects an object, stop the belt, stop inserting objects\n    if res == 1 and not hasStopped then\n        if boolList[1] then\n            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)\n            deltaTime = sim.getSimulationTime()-T_last_inserted\n            hasStopped = true\n        else\n            local box = table.remove(boxList,1)\n            local boxDummy = table.remove(boxDummyList,1)\n            table.remove(boolList,1)\n\n            sim.removeObject(box)\n            sim.removeObject(boxDummy)\n        end\n    end\n\n    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting\n    if res == 0 and hasStopped then\n        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)\n        hasStopped = false\n        T_last_inserted = sim.getSimulationTime()-deltaTime\n    end\n    \n]]--\nend\nfunction sysCall_sensing()\n    -- put your sensing code here\nend\nfunction sysCall_cleanup()\n    -- do some clean-up here\nend\n-- Convert a lua table into a lua syntactically correct string\nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n-- See the user manual or the available code snippets for additional callback functions and details\n \n \n', 'tags': '', 'url': 'w15 40923101.html'}, {'title': 'w15 40923103', 'text': '利用uArm機械手臂匯入程式，用吸盤吸取小方塊 \n \n \n', 'tags': '', 'url': 'w15 40923103.html'}, {'title': 'w15 40923108', 'text': '利用UARM來Tic-Tae-Toe遊戲模擬 \n \n 轉入coppliasim後匯入程式碼： \n function sysCall_init()\n    axis1=sim.getObject(\'./joint1\')\n    axis2=sim.getObject(\'./joint2\')\n    axis3=sim.getObject(\'./joint3\')\n    suctionPad=sim.getObject(\'/suctionPad\')\n    rotation1 = 0\n    rotation2 = 0\n    rotation3 = 0\n    deg = math.pi/180.\n    enableSuctionPad(true)\nend\nfunction enableSuctionPad(enable)\n    -- use the suctionPad object to pass the variable activity value\n    -- if enable = true, the activity = \'on\'\n    if enable then\n        sim.writeCustomDataBlock(suctionPad,\'activity\',\'on\')\n    else\n        sim.writeCustomDataBlock(suctionPad,\'activity\',\'off\')\n    end\nend\nfunction sysCall_actuation() \n--[[\n    rotation1 = rotation1 + 1*deg\n    print(rotation1)\n    sim.setJointPosition(axis1, -rotation1)\n    sim.setJointPosition(axis2, -rotation1)\n]]\n    message, auxiliaryData=sim.getSimulatorMessage()\n    while message ~= -1 do\n        key=auxiliaryData[1]\n        sim.addStatusbarMessage(\'user press key:\'..key)\n        if (message==sim.message_keypress) then\n           --if (auxiliaryData[1]==112) then --p activate the suction pad\n            if (auxiliaryData[1]==string.byte(\'p\')) then\n                -- if key p pressed activate the suction mode\n--sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                enableSuctionPad(true)\n            end -- if p\n            if (auxiliaryData[1]==string.byte(\'q\')) then --q deactivate the suction pad\n                -- if key q pressed deactivate the suction mode\n--sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                enableSuctionPad(false)\n            end -- if q\n            if (auxiliaryData[1]==string.byte(\'k\')) then --k right turn in degree\n                -- if key k pressed axis1 angle adds 2 degrees\n                 rotation1 = rotation1 + 2*deg\n                 --sim.setJointPosition(axis1, rotation1)\n                 sim.setJointTargetPosition(axis1, rotation1)\n            end -- if k\n            if (auxiliaryData[1]==string.byte(\'l\')) then --l left turn in degree\n                -- if key l pressed axis1 angle substract 2 degrees\n                 rotation1 = rotation1 - 2*deg\n                 --sim.setJointPosition(axis1, rotation1)\n                 sim.setJointTargetPosition(axis1, rotation1)\n            end -- if l\n-- for joint2 start ##########################################################\n            if (auxiliaryData[1]== string.byte("h")) then --r right turn in degree\n                -- if key r pressed axis1 angle adds 2 degrees\n                 rotation2 = rotation2 + 1*deg\n                 --sim.setJointPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis2, rotation2)\n            end -- if k\n            if (auxiliaryData[1]==string.byte("j")) then\n                -- if key j pressed axis2 angle substract 2 degrees\n                 rotation2 = rotation2 - 1*deg\n                 --sim.setJointPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis2, rotation2)\n            end -- if j\n-- for joint2 end ##########################################################\n-- for joint3 start ##########################################################\n            if (auxiliaryData[1]== string.byte("f")) then\n                -- if key f pressed axis3 angle adds 2 degrees\n                 rotation3 = rotation3 + 1*deg\n                 --sim.setJointPosition(axis3, rotation3)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if f\n            if (auxiliaryData[1]==string.byte("g")) then\n                -- if key g pressed axis3 angle substract 2 degrees\n                 rotation3 = rotation3 - 1*deg\n                 --sim.setJointPosition(axis3, rotation3)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if g\n-- for joint3 end ##########################################################\n            if (auxiliaryData[1]==99) then --c coordinate of block\n                blockPosition = sim.getObjectPosition(block, BaseFrame)\n                sim.addStatusbarMessage("coordinate:"..table_to_string(blockPosition))\n            end --if c\n       end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n    end -- while\nend -- function\n  \nfunction sysCall_sensing() \n--[[\n    -- Read Proximity sensor (0= nothing detected, 1 = object detected)\n    local res = sim.readProximitySensor(proximity)\n  \n    -- Check if possible to insert an new box\n    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then\n        insertBox()\n    end\n  \n    -- If proximity sensor detects an object, stop the belt, stop inserting objects\n    if res == 1 and not hasStopped then\n        if boolList[1] then\n            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)\n            deltaTime = sim.getSimulationTime()-T_last_inserted\n            hasStopped = true\n        else\n            local box = table.remove(boxList,1)\n            local boxDummy = table.remove(boxDummyList,1)\n            table.remove(boolList,1)\n  \n            sim.removeObject(box)\n            sim.removeObject(boxDummy)\n        end\n    end\n  \n    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting\n    if res == 0 and hasStopped then\n        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)\n        hasStopped = false\n        T_last_inserted = sim.getSimulationTime()-deltaTime\n    end\n      \n]]--\nend\nfunction sysCall_sensing()\n    -- put your sensing code here\nend\nfunction sysCall_cleanup()\n    -- do some clean-up here\nend\n-- Convert a lua table into a lua syntactically correct string\nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n-- See the user manual or the available code snippets for additional callback functions and details \n \n', 'tags': '', 'url': 'w15 40923108.html'}, {'title': 'W16', 'text': '任務一： \n 利用 tkinter GUI 介面 slider 控制 uArm 機械手臂 \n 任務二： \n 利用 OpenCV 擷取場景中的 Vision Sensor 串流影像 \n 任務三： \n w15_rotating_cuboid 加入網際 Vision Sensor 串流, 使用者啟動後, 各用戶可以透過瀏覽器擷取場景中的串流影像 \n', 'tags': '', 'url': 'W16.html'}, {'title': 'w16 40923101', 'text': '利用tkinter GUI介面slider控制uArm機械手臂 \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 利用OpenCV擷取場景中的Vision Sensor串流影像 \n \n \n \n \n \n \n \n   \n \n \n \n \n \n', 'tags': '', 'url': 'w16 40923101.html'}, {'title': 'w16 40923103', 'text': '利用tkinter GUI介面slider控制uArm機械手臂 \n \n \n \n \n \n \n   \n \n \n \n \n online exam \n \n 1.online exam已知左側綠色底座的 uArm 機械手臂, 其基座座標原點位於絕對座標 (1.0, 0.25, 0), 啟動模擬後 green_suctionpad_frame 座標原點則位於 (0.22859, 0.26047, 0.36576), 請列出運算式說明, 啟動模擬後 joint1, joint2 與 joint3 分別以逆時針旋轉 5 度後, 求 green_suctionpad_frame 的絕對座標值.( x:-1.0000 , y: +0.2500 , z: -0.1786 ) \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 2.已知左側 uarm 前方的紅色方塊頂端中心座標值為 (0.2, 0.4, 0.1), 請列出運算式說明左側 uarm 機械手臂的 joint1, joint2 與 joint3 該如何旋轉才能讓 end effector 的吸盤末端中心點移動至紅色方塊頂端中心? Reference: \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w16 40923103.html'}, {'title': 'w16 40923108', 'text': '1.已知左側綠色底座的 uArm 機械手臂, 其基座座標原點位於絕對座標 (1.0, 0.25, 0), 啟動模擬後 green_suctionpad_frame 座標原點則位於 (0.22859, 0.26047, 0.36576), 請列出運算式說明, 啟動模擬後 joint1, joint2 與 joint3 分別以逆時針旋轉 5 度後, 求 green_suctionpad_frame 的絕對座標值? \n Ans：X(0.264)，Y(0.1958)，Z(0.3895) \n \n joint1：k 為逆時針，l 為順時針 \n joint2：h 為逆時針，j 為順時針 \n joint3：f 為逆時針，g 為順時針 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n \n 2.已知左側 uarm 前方的紅色方塊頂端中心座標值為 (0.2, 0.4, 0.1), 請列出運算式說明左側 uarm 機械手臂的 joint1, joint2 與 joint3 該如何旋轉才能讓 end effector 的吸盤末端中心點移動至紅色方塊頂端中心? \n Ans： joint1順時針10度，joint2逆 時針28度調整，joint3 順時針32度就可以接近紅色方塊的中心。 \n \n joint1：u 為逆時針，i 為順時針 \n joint2：t 為逆時針，y 為順時針 \n joint3：e 為逆時針，r 為順時針 \n \n \n', 'tags': '', 'url': 'w16 40923108.html'}, {'title': 'w16 40923156', 'text': '1.已知左側綠色底座的uArm機械手臂，其基座座標原點位於絕對座標(1.0, 0.25, 0) ， 啟動模擬後green_suctionpad_frame座標原點則位於 (0.22859,0.26047,0.36576) ， 請列出運算式說明 ， 啟動模擬後 joint1 ， joint2 與 joint3 分別以逆時針旋轉5度後 ， 求green_suctionpad_frame的絕對座標值 \n \n \n \n \n 2.已知左側 uarm 前方的紅色方塊頂端中心座標值為 (0.2, 0.4, 0.1), 請列出運算式說明左側 uarm 機械手臂的 joint1, joint2 與 joint3 該如何旋轉才能讓 end effector 的吸盤末端中心點移動至紅色方塊頂端中心? \n \n x:+0.2608 y:0.6202 z:0.3460 \n \n \n \n \n x:0.2079 y:+1.1202 z:+0.1078 \n CoppeliaSim Python remote API 範例: \n 利用 tkinter GUI 介面 slider 控制 uArm 機械手臂 \n \n \n \n \n   \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w16 40923156.html'}, {'title': 'W17', 'text': '', 'tags': '', 'url': 'W17.html'}, {'title': 'w17 40923101', 'text': '利用 UARM 來執行Tic-Tae-Toe遊戲模擬 \n 利用15周的作業來修改 \n 利用鍵盤來操作旋轉模擬 \n 我修改了老師的程式 \n 將操作按鍵改為我較熟悉的方式 \n joint1， L為順時針，K 為逆時針 \n joint2，S 為順時針，F 為逆時針 \n joint3，E 為順時針，D 為逆時針 \n \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w17 40923101.html'}, {'title': '期末考週', 'text': '', 'tags': '', 'url': '期末考週.html'}, {'title': 'w18 40923101', 'text': '利用tkinter GUI介面slider控制uArm機械手臂 \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 利用OpenCV擷取場景中的Vision Sensor串流影像 \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w18 40923101.html'}, {'title': 'w18 40923108', 'text': '任務一： \n 利用nx修改 "絞鍊"與 "front joint" 零件的外型，並 將Triangular connecting rod與left link及end link等零組件與 right crank與right link的組件左右互換。 \n 新組合檔 \n 絞鍊： \n \n 前端關節(front joint)： \n \n \n 任務二： \n 對老師原先給的零件檔案加以更改，即可完成。 \n front joint： \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 絞鍊： \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n \n 任務三： \n 與組員們透過teams會議，由 40923101 分享畫面並教導組員們操控並測試題目所要求的用 XML UI slider控制功能uArm機械手臂，大家也可以用分享螢幕畫面的功能互相討論、教學、透過錄影的功能將會議過程記錄下來，這種方式是一個很棒的學習經驗，也可快速領悟 ! \n \n \n 任務四： \n 協同新幾何外型組立的 uArm 機械手臂場景中, 加入 suctionPad 零件, 以手動操控或程式操控的方式, 錄製 block 方塊零件的取放過程。 \n 這部分比較困難，雖然是用之前的程式就能模擬，但還參雜著程式的操控花了多點時間討論和教導。 \n \n \n \n 任務五： \n 以跨網路 Python remote API 的方式, 錄製圖形介面 slider 控制前三軸的轉動影片。 \n 跨網路的這個領域是我們之前沒有接觸到的部分，因此花了比較多時間摸索何謂跨網路，但最後我們認為應該是透過這種方式才是。 \n \n \n  <script src="../cmsimde/static/chimper/js/jquery-3.3.1.min.js"></script>  \n \n \n \n \n \n \n \n \n \n \n \n            <script src="../cmsimde/static/chimper/js/typed.js"></script>\n                    <script>\n                    var typed = new Typed(\'.typed-words\', {\n                    strings: ["Web Apps"," WordPress"," Mobile Apps"],\n                    typeSpeed: 80,\n                    backSpeed: 80,\n                    backDelay: 4000,\n                    startDelay: 1000,\n                    loop: true,\n                    showCursor: true\n                    });\n                    </script>\n             \n \n  啟用 LaTeX equations 編輯  \n \n  <script>\n  MathJax = {\n    tex: {inlineMath: [[\'$\', \'$\'], [\'\\(\', \'\\)\']]}\n  };\n  </script>\n  <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script> \n', 'tags': '', 'url': 'w18 40923108.html'}, {'title': 'Note', 'text': '', 'tags': '', 'url': 'Note.html'}, {'title': '組員上傳至大組網頁', 'text': '首先上傳時要先將 圖片 和 wink改成網址 \n 先去個人靜態網頁開啟要上傳的照片，並將照片(或影片) 網址 複製下來。 \n \n \n 接著到動態編輯將 網址 貼上 \n \n 接著修改wink影片，同樣是到 靜態網頁開啟wink並將網址複製下來 \n \n 接著到動態編輯將原本的網址覆蓋貼上 \n \n 至小黑窗推送 \n \n 推完後到再重新開啟動態網頁，並將須上傳至大組網頁內容所有的code複製下來 \n \n 貼到白窗，記得標題要設置<h1>40923101</h1> (自己設定學號)，存 \xa0.txt檔 \n \n 到組長創建的cd2022ag1，按下 Fork \n \n 點進去 downloads ，再點選 Upload files \n \n 選擇剛所存的.txt檔，並上傳上去 \n \n 然後按下 commit changes \n \n 接著到 pull requests\xa0 新增 New\xa0pull request \n \n 按下 Create pull request \n \n 再按一次 Create pull request \n \n 組長會開協同，可以自己同意 Confirm merge \n \n 檢查是否上傳成功 \n \n wink教學影片： \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '組員上傳至大組網頁.html'}, {'title': '大組網頁同步方式', 'text': '方法1： \n 將原本需要 Pull\xa0 request的帳號調換，就可以把對方的資料反向Pull\xa0request到我的倉儲 \n Ex：原本是40923108在前面；a40923101在後方，需要同步40923108的倉儲及網頁內容，因此將兩者對調。 \n \n 按下 create pull\xa0 request \n \n 再次按下 create pull\xa0 request \n \n 最後 Merge\xa0pull\xa0 request ，檢查有無成功 \n \n \n 方法2： \n \n 利用小黑窗進入個人倉儲 \xa0 \n 查看遠端倉儲路徑 \xa0 git remote -v \xa0 如果未設定過 upstream\xa0 只會跑出兩行 \n git remote add upstream  https://github.com/409231xx/cd2022agx.git 把409231xx的cd2022agx倉儲設置為自己的upstream，執行此指令後無返回任何訊息，再次執行指令\xa0 git remote -v \xa0 檢查是否成功。 \n git status \xa0 檢查本地已沒有未提交之修改 \n git fetch upstream \xa0為抓取組長之 倉儲並更新 \n git checkout main \xa0 切換至main分支 \n git merge upstream/main \xa0 合併遠程main分支 \n git push \xa0將個人 倉儲推送至組長倉儲後自己名下之倉儲 \n', 'tags': '', 'url': '大組網頁同步方式.html'}]};